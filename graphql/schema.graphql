scalar Time

type Account {
    id: String!
    name: String!
    orders: [Order!]!
}

type Product {
    id: String!
    name: String!
    description: String!
    price: Float!
}

type Order {
    id: String!
    createdAt: Time!
    totalPrice: Float!
    products: [OrderProduct!]!
}

type OrderProduct {
    id: String!
    name: String!
    description: String!
    price: Float!
    quantity: Int!
}

type PaginationInput {
    id: String!
    name: String!
    orders: [Order!]
}

type AccountInput {
    name: String!
}

type ProductInput {
    name: String!
    description: String!
    price: Float!
}

type OrderProductInput {
    id: String!
    quantity: Int!
}

type OrderInput {
    accountId: String!
    products: [OrderProductInput!]!
}

type Mutation {
    createAccount(account: AccountInput!): Account
    createProduct(product: ProductInput!): Product
    createOrder(order: OrderInput!): Order
}

type Query {
    accounts(pagination: PaginationInput, id: String): [Account!]!
    products:(pagination: PaginationInput, query:String,  id: String): [Product!]!
}